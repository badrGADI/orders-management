name: CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true # This allows the workflow to continue even if linting fails

    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint frontend
        run: cd apps/frontend && pnpm run lint
        continue-on-error: true # Continue even if frontend linting fails

      - name: Lint backend
        run: cd apps/backend && pnpm run lint
        continue-on-error: true # Continue even if backend linting fails

  build-frontend:
    runs-on: ubuntu-latest
    needs: lint
    if: always() # This ensures this job runs even if lint job fails

    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: cd apps/frontend && NODE_OPTIONS="--max_old_space_size=4096" pnpm run build
        env:
          # Disable static generation for the not-found page
          NEXT_DISABLE_STATICS: 1

  build-backend:
    runs-on: ubuntu-latest
    needs: lint
    if: always() # This ensures this job runs even if lint job fails

    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: cd apps/backend && npx prisma generate

      - name: Build backend
        run: cd apps/backend && pnpm run build

  deploy:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy frontend to Vercel
        working-directory: apps/frontend
        run: vercel --prod --confirm --token ${{ secrets.VERCEL_TOKEN }}
